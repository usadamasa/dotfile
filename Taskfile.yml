version: '3'

vars:
  DOTFILE_DIR: "{{.USER_WORKING_DIR}}"
  CONFIG_DIR: "$HOME/.config"
  ZSH_CUSTOM: "$HOME/.oh-my-zsh/custom"

tasks:
  default:
    desc: セットアップを実行
    cmds:
      - task: setup

  bootstrap:
    desc: 初回セットアップ（Homebrewインストールから実行）
    cmds:
      - echo "🚀 dotfiles初回セットアップを開始します..."
      - task: check-macos
      - task: install-homebrew
      - task: install-go-task-initial
      - echo "✅ 初期セットアップ完了。続いて通常セットアップを実行します..."
      - task: setup
      - echo "🎉 全てのセットアップが完了しました！"
      - echo "⚠️  新しいターミナルセッションを開始して設定を有効化してください"

  setup:
    desc: 完全なセットアップを実行
    deps:
      - install-homebrew
      - install-core-tools
      - setup-xdg
      - setup-zsh
      - setup-symlinks
      - setup-vim
      - setup-additional-tools

  check-macos:
    desc: macOS環境をチェック
    cmds:
      - |
        if [[ "$OSTYPE" != "darwin"* ]]; then
          echo "❌ エラー: このセットアップはmacOS専用です"
          exit 1
        fi
        echo "✅ macOS環境を確認しました"

  install-homebrew:
    desc: Homebrewをインストール
    cmds:
      - |
        if ! command -v brew &> /dev/null; then
          echo "📦 Homebrewをインストール中..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          # Apple Silicon Macの場合はPATHに追加
          if [[ -f "/opt/homebrew/bin/brew" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          echo "✅ Homebrewのインストールが完了しました"
        else
          echo "✅ Homebrew は既にインストールされています"
        fi
    status:
      - command -v brew

  install-go-task-initial:
    desc: go-taskの初期インストール（Homebrew）
    deps: [install-homebrew]
    cmds:
      - |
        if command -v task &> /dev/null; then
          echo "✅ go-task は既にインストールされています"
        else
          echo "📦 go-taskをHomebrewでインストール中..."
          brew install go-task
          echo "✅ go-taskのインストールが完了しました"
        fi

  install-core-tools:
    desc: 主要開発ツールをHomebrewでインストール
    deps: [install-homebrew]
    cmds:
      - echo "🛠️ 主要開発ツールをインストール中..."
      - |
        if brew install \
          git \
          gh \
          ghq \
          jq \
          direnv \
          peco \
          tig \
          zsh \
          pipx \
          git-now 2>/dev/null; then
          echo "✅ 主要開発ツールのインストールが完了しました"
        else
          echo "⚠️  一部のツールはインストールできませんでした（既にインストール済みの可能性があります）"
        fi

  setup-xdg:
    desc: XDG Base Directory設定
    cmds:
      - echo "⚙️ XDG Base Directory設定を適用中..."
      - ln -sfn "{{.DOTFILE_DIR}}/.zshenv" "$HOME/"
      - mkdir -p "{{.CONFIG_DIR}}"
      - mkdir -p "$HOME/.local/share"
      - mkdir -p "$HOME/.cache"
      - echo "✅ XDG Base Directory設定が完了しました"
    status:
      - test -L "$HOME/.zshenv"
      - test -d "{{.CONFIG_DIR}}"

  setup-zsh:
    desc: Zshとoh-my-zshをセットアップ
    deps: [install-core-tools, setup-xdg]
    cmds:
      - |
        if [ ! -d "$HOME/.oh-my-zsh" ]; then
          echo "🐚 oh-my-zshをインストール中..."
          RUNZSH=no sh -c "$(curl -fsSL https://install.ohmyz.sh/)"
          echo "✅ oh-my-zshのインストールが完了しました"
        else
          echo "✅ oh-my-zsh は既にインストールされています"
        fi
      - task: setup-zsh-plugins
    status:
      - test -d "$HOME/.oh-my-zsh"

  setup-zsh-plugins:
    desc: Zshプラグインをインストール
    deps: [setup-zsh]
    cmds:
      - echo "🔌 Zshプラグインをインストール中..."
      - |
        if [ ! -d "{{.ZSH_CUSTOM}}/plugins/zsh-autosuggestions" ]; then
          echo "  📦 zsh-autosuggestionsをインストール中..."
          git clone https://github.com/zsh-users/zsh-autosuggestions "{{.ZSH_CUSTOM}}/plugins/zsh-autosuggestions"
        fi
      - |
        if [ ! -d "{{.ZSH_CUSTOM}}/plugins/zsh-syntax-highlighting" ]; then
          echo "  📦 zsh-syntax-highlightingをインストール中..."
          git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "{{.ZSH_CUSTOM}}/plugins/zsh-syntax-highlighting"
        fi
      - echo "✅ Zshプラグインのインストールが完了しました"
    status:
      - test -d "{{.ZSH_CUSTOM}}/plugins/zsh-autosuggestions"
      - test -d "{{.ZSH_CUSTOM}}/plugins/zsh-syntax-highlighting"

  setup-symlinks:
    desc: 設定ファイルのシンボリックリンクを作成
    deps: [setup-xdg]
    cmds:
      - echo "🔗 設定ファイルのシンボリックリンクを作成中..."
      - rm -rf "{{.CONFIG_DIR}}/zsh"
      - ln -sfn "{{.DOTFILE_DIR}}/config/zsh" "{{.CONFIG_DIR}}/"
      - ln -sfn "{{.DOTFILE_DIR}}/config/git" "{{.CONFIG_DIR}}/"
      - ln -sfn "{{.DOTFILE_DIR}}/config/vim" "{{.CONFIG_DIR}}/"
      - ln -sfn "{{.DOTFILE_DIR}}/config/npm" "{{.CONFIG_DIR}}/"
      - echo "✅ 設定ファイルのシンボリックリンク作成が完了しました"

  setup-vim:
    desc: Vim環境をセットアップ
    deps: [setup-symlinks, install-core-tools]
    cmds:
      - echo "📝 Vim環境をセットアップ中..."
      - mkdir -p "$HOME/.local/share/vim"
      - mkdir -p "$HOME/.cache/vim/swap"
      - mkdir -p "$HOME/.cache/vim/backup"
      - |
        if ! command -v powerline-shell &> /dev/null; then
          echo "  📦 powerline-shellをインストール中..."
          pipx install powerline-shell
          echo "  ✅ powerline-shellのインストールが完了しました"
        else
          echo "  ✅ powerline-shell は既にインストールされています"
        fi
      - echo "✅ Vim環境のセットアップが完了しました"
    status:
      - test -d "$HOME/.local/share/vim"
      - test -d "$HOME/.cache/vim/swap"
      - test -d "$HOME/.cache/vim/backup"

  setup-additional-tools:
    desc: 追加ツールをインストール
    deps: [install-core-tools]
    cmds:
      - echo "🛠️ 追加ツールをインストール中..."
      - |
        if command -v brew &> /dev/null; then
          echo "  📦 GUIアプリケーションをインストール中..."
          brew install --cask font-cica jetbrains-toolbox visual-studio-code 2>/dev/null || echo "  ⚠️  一部のGUIアプリケーションはインストールできませんでした"
        fi
      - |
        if command -v gh &> /dev/null; then
          if ! gh extension list | grep -q "seachicken/gh-poi"; then
            echo "  📦 gh poi拡張をインストール中..."
            gh extension install seachicken/gh-poi
          fi
        fi
      - echo "✅ 追加ツールのインストールが完了しました"

  clean:
    desc: セットアップをクリーンアップ（注意：設定を削除します）
    prompt: "本当にセットアップをクリーンアップしますか？設定ファイルが削除されます。"
    cmds:
      - rm -f "$HOME/.zshenv"
      - rm -rf "{{.CONFIG_DIR}}/zsh"
      - rm -rf "{{.CONFIG_DIR}}/git"
      - rm -rf "{{.CONFIG_DIR}}/vim"
      - rm -rf "{{.CONFIG_DIR}}/npm"

  status:
    desc: セットアップ状況を確認
    cmds:
      - echo "=== セットアップ状況 ==="
      - echo "Homebrew:$(command -v brew >/dev/null && echo '✓' || echo '✗')"
      - echo "go-task:$(command -v task >/dev/null && echo '✓' || echo '✗')"
      - echo "主要ツール:$(command -v git >/dev/null && command -v gh >/dev/null && command -v jq >/dev/null && echo '✓' || echo '✗')"
      - echo "XDG設定:$(test -L "$HOME/.zshenv" && echo '✓' || echo '✗')"
      - echo "oh-my-zsh:$(test -d "$HOME/.oh-my-zsh" && echo '✓' || echo '✗')"
      - echo "zsh設定:$(test -L "$HOME/.config/zsh" && echo '✓' || echo '✗')"
      - echo "git設定:$(test -L "$HOME/.config/git" && echo '✓' || echo '✗')"
      - echo "vim設定:$(test -L "$HOME/.config/vim" && echo '✓' || echo '✗')"
      - echo "npm設定:$(test -L "$HOME/.config/npm" && echo '✓' || echo '✗')"
